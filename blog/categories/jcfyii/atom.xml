<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JCFYii | AngryGantz]]></title>
  <link href="http://AngryGantz.github.com/blog/categories/jcfyii/atom.xml" rel="self"/>
  <link href="http://AngryGantz.github.com/"/>
  <updated>2012-12-05T08:32:12+00:00</updated>
  <id>http://AngryGantz.github.com/</id>
  <author>
    <name><![CDATA[AngryGantz]]></name>
    <email><![CDATA[angrygantz@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JCFYii 6. Каталог товаров]]></title>
    <link href="http://AngryGantz.github.com/blog/2012/12/03/jcfyii-6/"/>
    <updated>2012-12-03T19:15:00+00:00</updated>
    <id>http://AngryGantz.github.com/blog/2012/12/03/jcfyii-6</id>
    <content type="html"><![CDATA[<p>Так. Пора приступать к каталогу товаров. Буду делать отдельным модулем. В этот же модуль пойдёт всё, что относится к заказам. В конечном итоге У меня будет несколько групп заказчиков и плюс менеджеры, обрабатывающие заказ. Модуль буду делать максимально автономным. В данном случае он будет работать совместно со связкой Y-ii+rights, но в принципе это не обязательно. Просто надо будет реализовать какой-то простой API связи с юзерами и ролями, желательно в одном файле. Офрмлю скорее всего в виде хелпера или отдельного класса типа "ApiToUser" где будет проверка на принадлежность к группе и выдёргивание нужных полей из модуля Yii-User типа имени пользователя и, может быть, ещё каких либо полей профайла. Таким образом можно будет добиться полной автономии модуля от всего, кроме расширения bootstrap. Но на эту зависимость иду вполне осознанно. В принципе можно конечно bootstrap засунуть прямо в модуль, но он в приложении везде использоваться будет. Вобщем если вдруг этот эксперимент нечаянно по прихоти судьбы будет нужен ещё кому-то кроме меня, он сам сможет засунуть bootstrap в модуль и получить полную автономность.</p>

<!-- more -->


<h2>Схема SQL</h2>

<p>Нарисуем схемку для каталога.</p>

<p> <img src="http://iscr.ru/photo/1353570781_diagsql2.jpg" alt="SQL Схема каталога" /></p>

<p>Первое. Это не совсем правильная схема -) Она избыточна. Избыточна по наличию полей для фото у товаров, хотя есть отдельная таблица фото, она избыточна наличием таблицы отношений многие ко многим для связки товар-категория и при этом наличием поля в товарах с ИД "главной категории". Она неправильна тем, что для категорий количество картинок ограничено и введено несколько полей для картинок вместо того, что-бы сделать тоже отдельную таблицу с фото для категорий... Вобщем на экзамене двойка :-) Но мне так удобнее по разным причинам. Так что, что хочу, то и делаю.</p>

<p>Второе. Таблица категорий реализует схему построения дерева  "modified pre-order tree traversal algorithm". На мой взгляд весьма эффективный метод построения деревьев, которым почти всегда пользуюсь. А тут ещё к своему удовольствию нашел расширение для Yii, работающее с этим методом.</p>

<h2>Создание и подготовка модуля</h2>

<p>Модуль <strong>Catalog</strong> просто создал через GII. В конфигурации добавил в секцию модулей. Теперь сразу подумаем, что потребуется для работы каталога. Во первых расширение, которое я упомянул выше для работы с деревьями категорий. Второе. В каталоге естественно будут картинки. Их надо будет ресайзить, делать превьюшки и т.д.
Терпеть ненавижу практику, когда превьюшки картинок делают не создавая пережатый тумбнэйл, а просто указывая маленький размер для большой картинки. Может это болезнь со старых времен медленного интернета, но вот не приемлю. Мне это бредом кажется. Посему будем делать тумбнэйлы. Для этого использую расширение EWideImage.
Кстати, расширения буду загонять в модуль каталога а не в ext приложения для обеспечения мало-мальской автономии создаваемого модуля.</p>

<p>Как подключить расширение внутри модуля? Очевидно нужен свой конфигурационный файл. И его надо как-то подхватывать. По примеру приложения делаю папку <strong>config</strong> и в ней файл <strong>main.php</strong> вот такого содержания:</p>

<p><code>php
&lt;?php
return array(
);
?&gt;
</code></p>

<p>Теперь его как-то надо подхватить. В функции <strong>init</strong> в начало вставляем:</p>

<p>```php
&lt;?php</p>

<pre><code>    $config = require dirname(__FILE__) . DIRECTORY_SEPARATOR . 'config'. DIRECTORY_SEPARATOR  .'main.php';
    $this-&gt;configure($config);
</code></pre>

<p>?>
```</p>

<p> Всё. По идее теперь можно туда писать то-же, что и для приложения, только локально для данного модуля.</p>

<p>Для удобства определяю Алиасы на модуль и его расширения. В конфиге Выше возврата массива пишем</p>

<p><code>php
&lt;?php
$catalogConfigDir = dirname(__FILE__);
$rootCatalog = $catalogConfigDir . DIRECTORY_SEPARATOR . '..';
Yii::setPathOfAlias('mcatalog', $rootCatalog);
Yii::setPathOfAlias('mext', $rootCatalog . DIRECTORY_SEPARATOR . 'extensions');
?&gt;
</code></p>

<p>Приступим к подключению расширений, которые будем складывать в <strong>catalog/extensions</strong></p>

<h2>Расширение Nested Set</h2>

<p>Страничка на офф сайте Yii: <a href="http://www.yiiframework.com/extension/nestedset">Nestedset</a></p>

<p>Реализует алгоритм построения деревьев  Modified pre-order tree traversal algorithm
Подробности о методе можно почитать <a href="http://www.sitepoint.com/hierarchical-data-database-2/">здесь</a></p>

<h4>Требования.</h4>

<p>Таблица БД с деревом должна иметь следующие поля:</p>

<p><code>sql
CREATE TABLE IF NOT EXISTS `tree` (
  `id` int(11) NOT NULL auto_increment,
  `lft` int(11) NOT NULL,
  `rgt` int(11) NOT NULL,
  `level` int(11) NOT NULL,
  `name` varchar(255) NOT NULL default '',
  PRIMARY KEY  (`id`),
  KEY `lft` (`lft`),
  KEY `rgt` (`rgt`),
  KEY `level` (`level`),
  KEY `name` (`name`)
)
</code></p>

<p>Названия полей не обязательно именно такие. Потом в модели можно будет настроить.
В Таблицу до начала работы должна быть добавлена одна запись:</p>

<p><code>sql
INSERT INTO `tree` (`id`, `lft`, `rgt`, `level`, `name`) VALUES
(1, 0, 1, 0, 'Root');
</code></p>

<h4>Установка.</h4>

<ol>
<li>Кидаем расширение в <strong>catalog.extensions</strong></li>
<li>В конфигурации модуля:</li>
</ol>


<p>```php
&lt;?php
return array(</p>

<pre><code>'import'=&gt;array(
    'mext.nestedset.*'
),
</code></pre>

<p>);
?>
```
Собственно пока всё. Когда будет готова модель для категории, туда надо добавить функцию</p>

<p>```php
&lt;?php
public function behaviors(){</p>

<pre><code>return array(
    'TreeBehavior' =&gt; array(
        'class' =&gt; 'application.extensions.nestedset.TreeBehavior',
        '_idCol' =&gt; 'id',
        '_leftCol' =&gt; 'left',
        '_rightCol' =&gt; 'right',
        '_levelCol' =&gt; 'level',
    )
);
</code></pre>

<p>}
?>
```</p>

<h2>Расширение EWideImage</h2>

<p>Домашняя страница <a href="http://www.yiiframework.com/extension/ewideimage">EWideImage</a>
Установка - положить в папку расширений модуля и добавить в конфиг в секцию импорта <code>'mext.EWideImage.EWideImage'</code></p>

<h2>Создание скелета</h2>

<p>Удобная всё таки штука - GII. Мне в принципе понравилось, как я переоформил вьюшки модуля Yii и в этом модуле хочу сделать аналогичные. Большая часть вьюшек получается стандартной. Поэтому в папке <strong>mcatalog.lib.gii</strong> готовлю скелет с нужным оформлением для кодогенератора. За основу беру шаблон расширения Yii-bootstrap и немного переделываю вьюшки. Так же чуть меняю модель, добавляя функцию, возвращающую имя сущности в разных падежах и склонениях. Это нужно для менюшек и крошек во вьюшках.
Код шаблонов в репозитории, никаких хитростей и проблем с подготовкой шаблона не было, так что тут и писать особо нечего. Не очень понятно, зачем нужна вьюшка с листом <strong>index</strong>, всё что надо есть в <strong>admin</strong> ну пусть будет, дальше посмотрим что из неё можно сделать, глядишь и пригодится. Честно переоформил в «свой» стиль и оставил в шаблоне.</p>

<p>Создаю все модели и CRUD через  новый шаблон кодогенератора (путь к новому шаблону указывается в главном конфиге приложения в секции GII). Собственно, скелет создан.</p>

<p>Теперь время приводить в порядок его бакенд. Фронт будем делать потом. Кодогенератор сделал очень большой кусок работы, но её там ещё полно. Начнем с мелочей. Это отображение и редактирование связанных данных, типа
вывода Имени Вендора вместо его id в карточке товара и выбор так же по имени. Желательно из ДропДаун листиков. Желательно симпатишных. Желательно с аякс-фильтром при наборе текста. Это наиболее удобно, особенно если в списке больше 10 позиций.</p>

<h2>Расширение ESelect2</h2>

<p><a href="http://www.yiiframework.com/extension/select2">Домашняя страничка на офф сайте</a>
Это Yii врапер для плагина Select2 Jqube. Прост в использовании и удобен. Поэтому нафиг велосипеды, будем пользоваться им. Качаю, распаковываю в <strong>mext</strong> (напомню, это алиас папки extensions модуля каталога),
прописываю в конфиге импорт <strong>'mext.select2.ESelect2'</strong> . Можно пользоваться. Открываем <strong>_form</strong> для <strong>JProduct</strong> и меняем поле для <strong>product_vendor</strong> на вот такую конструкцию:</p>

<p>```php
</p>Производитель
&lt;?php
$vendorItems = CHtml::listData(JVendor::model()->findAll(), 'vendor_id', 'vendor_name');
$this->widget('mext.select2.ESelect2',array(
  'model'=>$model,</p>

<pre><code>'attribute'=&gt;'product_vendor',
'data'=&gt;$vendorItems,
'htmlOptions'=&gt;array(
'class'=&gt;'selectdrop5',  
</code></pre>

<p>  ),  <br/>
)); ?>
</p>
```</p>

<p>То есть сначала создаем полный список производителей в <strong>$vendorItems</strong> и запускаем расширение, в качестве параметров подсовывая ему модель продукта, созданный список и ключевой столбец ( <strong>product_vendor</strong> ) из модели для данных о вендорах. Проверяем, всё работает. Красяво, удобно и кода мизер. Полный феншуй. <br/>
Поясню о <strong>'class'=>'selectdrop5'</strong> После запуска без класса выглядело всё не очень хорошо. Создал пакет классов для таких дропбоксов, синхронизируя их по размеру с разметкой bootdtrap:</p>

<p>```css
[class*="selectdrop"] {</p>

<pre><code>display: block;
margin-top: 10px;
</code></pre>

<p>}
.selectdrop5 {width:380px;}
```
Ну и по мере надобности буду добавлять циферки на хвосте класса с соответствующими размерами.
.selectdrop5 по ширине соответствует стандартному <strong>span5</strong> бутстрапа. эти стили положил в <strong>mcatalog.css/fmenu.css</strong>. Только теперь уже там не только стили, относящиеся к плавающей менюшке. Поэтому переобзываю файл в jcatalog.css и соответственно подправляю <strong>mcatalog.views.layouts.column1</strong></p>

<p>Аналогичным способ меняю всё, где нужны подобные связанные дроплисты.
Ну а там, где надо просто показать связанное поле, просто пишем конструкцию типа</p>

<p><code>php
&lt;?php
 echo $model-&gt;Vendor-&gt;vendor_name;
?&gt;
</code></p>

<p>Соответственно строка в функции <strong>relations()</strong> модели выглядит так:</p>

<p><code>php
&lt;?php
 'Vendor' =&gt; array(self::BELONGS_TO, 'JVendor', 'product_vendor'),
?&gt;
</code></p>

<p><strong>self::BELONGS_TO</strong> - тип связи "многие к одному". Соответственно для других типов связи такая конструкция как <strong>echo $model->Vendor->vendor_name;</strong> не прокатит по очевидным причинам. <strong>JVendor</strong> - класс модели родительской таблицы. <strong>product_vendor</strong> - внешний ключ.</p>

<p>Как это засунуть например в <strong>TbDetailView</strong> (это в файле <strong>view.php</strong> класса JProduct)?
вместо <strong>'product_vendor'</strong> в перечислении атрибутов вставляем</p>

<p><code>php
&lt;?php
array( 'name'=&gt;'product_vendor',
  'value'=&gt;$model-&gt;Vendor-&gt;vendor_name,
),   
?&gt;
</code></p>

<p>Вышесказанное справедливо и для *GridView.
Соответствующие манипуляции проделываем везде, где требуется. Не забыть подправить везде сгенерированные функции <strong>relations</strong>. Генератор в качестве референсной таблицы вбивает собственно имя таблицы, а не класса, который мы создаем на базе этой таблицы. (Ну разве что в качестве имен классов использовать собственно имена таблиц)</p>

<p>Теперь ещё бы неплохо реализовать редактирование полей вроде описаний и характеристик в чём-нибудь ВайСиВинговском.</p>

<h2>Подключаем CKEditor</h2>

<p>CKEditor - это новая версия всем известного FCKeditor. Какая-то там история была на тему начальных букв "FCK" и вроде как из-за неё поменяли название. Ну не суть. Идём на сайт редактора и скачиваем <a href="http://ckeditor.com/download">отсюда</a> последнюю версию. Вот тут отступлю от правила "всё в модуле" и содержимое архива (то есть папку <strong>ckeditor</strong>) отправляю в корневую директорию сайта. Потом подумаю, можно ли его вообще запустить внутри модуля, который в <strong>protected</strong> с  deny all лежит. Впрочем не сильно это и надо.</p>

<p>Для публикации редактора с нужными полями воспользуемся классом CHtml. Минут 10 раздумывал, куда положить вспомогательный класс, ничего умнее папки <strong>helpers</strong> не придумал. Там создал маленький класс <strong>JCKeditor</strong> специально для публикации редактора.  Код не привожу, лежит в сорцах. Вызывается</p>

<p><code>php
&lt;?php   JCKeditor::activeCKEditor($model,'product_review',array('height'=&gt;'200px'));  ?&gt;
</code></p>

<p>Модель понятно, второй параметр - атрибут модели, для которого вызываем редактор, 3 параметр - массив с настройками редактора. на формах _form соответственно добавляем вызов редактора там, где надо.</p>

<p>Связанные данные где надо показали, редактор к нужным полям прикрутили. Осталось только чуть переформатировать "простыни" форм, где они слишком длинные. Делаю это бутстраповской стандартной вёрсткой для наведения окончательного феншуя в бэкенде.</p>

<p>Забыл... Картинки!!! С ними надо что-то делать. И показывать и загружать и удалять... Ну что же, приступим.</p>

<h2>Операции с фото.</h2>

<p>Для начала определим базовую директорию для всех картинок товаров. Не буду извращаться (или это наоборот извращение?) Определим прямо в файле модуля:</p>

<p><code>php
&lt;?php
public static $imgBase = 'images/catalog';
?&gt;
</code></p>

<p>То есть <strong>images</strong> лежит в корне сайта, как обычно. Переменная доступна из любого места вызовом</p>

<p><code>php
&lt;?php
CatalogModule::$imgBase;
?&gt;
</code></p>

<p>Все картинки для товаров должны лежать строго в определенных местах.  Места сии прописаны в категориях относительно базового пути для фото.</p>

<p>Порывшись на офф сайте нашел вполне подходящий инструмент.</p>

<h3>Расширение lcswfupload</h3>

<p><a href="http://www.yiiframework.com/extension/lcswfupload/">Страничка на оффсайте</a></p>

<p>Собственно по инструкции установил. Плюс чуть покопался в header.js на предмет отключения лишних сообщений после загрузки. В частности вывод названия темп-файла.  Плюс добавил два атрибута самому виджету с АйДи продукта и именем заменяемой фотографии, иначе сложно было бы делать замену картинки в модели.</p>

<p>Очень долго возился с ajax, хотелось всё сделать строго в идеологии фрэймворка. Вроде-бы получилось.
В конце концов всё сделал почти так, как хотелось. Подробные комментарии написал в функциях контроллеров продукта и фотографий, а так же очень подробно в представлениях <em>form и </em>frameAddPhoto (оба относятся к контроллеру JProductController.  Поэтому здесь подробно не описываю, должно быть понятно по коду и подробным комментариям в нём. Единственное, чем остался не совсем удовлетворен, это тем что ограничил работу с фото нового продукта. Все операции с фото после сохранения нового продукта. Можно сделать, но чувствую долго и нудно надо копаться. В остальном админка продуктов почти готова.</p>

<p>В целом фрэймворк пока нравится. Легкий, удобный, хорошо расписан API. Урок по созданию блога конечно ни о чём, но тут уж селяви.</p>

<h2>Фронт одного продукта.</h2>

<p>Люблю писать код мелкими кусками и потом собирать эти куски "рекваре онцами". Вот и здесь не буду отступать
от правила. Основным файлом будет views/jProduct/view.php. А в него уже кусками будем стыковать блоки.
Фронт вообще надо писать более вдумчиво, чем админку. Тут MVC должно проявляться во всей красе, кода должно быть как можно меньше, один сплошной дизайн, дабы легко его можно было менять. Начнем с блока показа фото.</p>

<h3>Блок показа фото _frontBlockPhoto.php</h3>

<p> Надо сделать стильненько. Ну это CSS и немножко JQuery. Но сначала надо подготовить все данные в "готовом виде. В представление из контроллера будем отдавать несколько обьектов и массивов:</p>

<ul>
<li>$model - собственно продукт, обьект JProduct</li>
<li>$addPhotosURL массив с готовыми URL с "дополнительными" фото продукта. (или "большими тумбами", если размер самих фото не стандартизован)</li>
<li>$tumbsUrl - массив url к тумбнэйльчикам нужного для представления размера</li>
<li>$corePhotosURL массив URL к "основной" и "технической" фото продукта.</li>
</ul>


<p>И готовить всё это удовольствие будем не в контроллере даже, а в модели. Ведь по сути идеология MVC сводится в основном к правилу «Делай модель как можно толще, а остальное как можно тоньше». Несколько утрированно, но по сути верно.</p>

<p>Все функции по подготовке этих данных постарался расписать в коде в комментариях более-менее подробно, так что здесь необходимости в этом нет.</p>

<p>Какое-то время соображал, как лучше всего реализовать «перемещение» по тумбнэйлам в боксе. Что-бы и просто было с точки зрения кода и нагрузки лишней не создавало. В конце концов решил просто передать массив с «большими» фотографиями яваскрипту тупо через JSON (1 строка) и кодом JQuery (1 строка) отреагировать на клик по тумбнэйлу с запихиванием в div с большой фото данные из массива. В клике передаю просто индекс элемента.  Вобщем по мне так симпапушно вполне. Вообще, хочу заметить, JQery хотя-бы в начальном приближении любой современный сайто строитель по моему знать должен. К стыду своему, я его знаю в очень очень начальном приближении. Иногда вместо того, что-бы искать и подрубать к сайту всякие монстро-плагины, по идее быстрее и красивее самому написать несколько строк. Но мозгов на это, к сожалению, хватает далеко не всегда.</p>

<p>Ну в данном случае даже моих хватило, что-бы нарисовать симпатишный бокс показа фото: ;-)</p>

<p>```php
&lt;?php
$i = 0;
foreach ($tumbsUrl as $tumb) {</p>

<pre><code>echo '&lt;li&gt;&lt;img src="' . $tumb . '" OnClick="ChangeImg(' . $i . ')"&gt;&lt;/li&gt;';
$i++;
</code></pre>

<p>}
?></p>

<script>
    // Передача в JS массива с URL фотографий
    var bigImgs = JSON.parse('<?php echo json_encode($addPhotosURL) ?>');
    // При клике на тумбале выводим большое фото в img с id  "bigImg"
    function ChangeImg(id){ $("#bigImg").attr("src", bigImgs[id]); }
</script>


<p>```</p>

<p>Ну и вокруг обвязка CSS, с которой собственно и провозился львиную долю времени подготовки это блока. Около часа наверное сидел «подгонял». Всё то одно не нравилось, то другое. Сейчас вроде нормально.</p>

<h3>Блок показа описания и характеристик _frontBlockOverwiew.php</h3>

<p>Ну тут делов было ровно на 10 минут - бутстраповские «табочки», вывод в лоб нужных полей и всё. Благо CSS уже готов для всей страницы.  Собственно всё. Ещё блок цен (розничной и оптовой, с показом последней только Дилерам), но там вёрстки и на 5 минут не набралось. Стандартные алерты бутстрапа вполне сгодились.</p>

<p>Ещё убрал «второе меню» со всех глаз, кроме админских. А Админу оставил. Можно в правку заходить в «лоб», с фронта. Я считаю это удобным. Секурность вроде в порядке, так что мона.</p>

<p>Ну вот и готова первая «фронтальная» страничка. Потом правда придется к ней вернуться, когда с заказами и корзинками буду возиться.</p>

<p>Продолжим с фронтом. Идём снизу вверх, на очереди</p>

<h2>Показ категории</h2>

<p>Двигаем теперь от контроллера JCategoryController. Вобще-то хотелось при показе категорий избавиться от обращений «наверх», например для вытаскивания фото товаров и работать в представлении только с тем, что «спустили сверху». Но нам надо кучу товаров показывать в одном месте... Вариантов несколько. Первый это плюнуть на это желание и в представлении таки лезть наверх. В конце концов невилико увеличение кода от строчки <code>$corePhotosURL= $model-&gt;getUrlCorePhoto();</code>  Но оно же только начать... А через надцать промежутков времени черт ногу сломит. Вариант 2. Расширить модель продукта и запихнуть фото в неё.
Вариант 3. Не впихивать в базовую модель сторонние объекты, а унаследоваться от неё и засунуть всю эту радость уже в наследника.</p>

<p>А если идти дальше, то можно вообще «родить» ещё от категории и туда засунуть атрибутами продукты, в которые запихнули картинки. Правда это монстро-обьект... Хотя ещё ведь вендор сверху есть, так что путь по умонстрению классов  ещё открыт и широк. ;-).</p>

<p>Шутка конечно. Укрупнять классы нет никакой необходимости, <code>$corePhotosURL= $model-&gt;getUrlCorePhoto();</code> вполне себе пойдёт в представлении. Ничем это не менее прозрачно, чем  <code>$prdName= $model-&gt;product\_name;</code>
Какая разница, к методу обращаться или атрибуту. Скорее наоборот «разрядить» - выделить например всю работу с картинками в отдельный класс. Просто пока смысла нет - модель ещё не такая уж толстая, а этот гипотетический класс больше и использовать негде. Хотя... Вот у меня для категории предусмотрено несколько картинок... Ладно, дальше видно будет.</p>

<p>А пока готовим вывод категории с теми классами что есть.</p>

<p>Задача: красивенько вывести весь товар из категории с полем <code>show=&gt;true</code> и симпатишненько его изобразить. Ну и фото категорий куда-нибудь пристроить, для примера. Пока не трогаем мэни-мэни модель и отрабатываем только принадлежность товара к главной категории. мэни-мэни - просто столб на будущее развитие, если таковое будет.</p>

<p>Пока для данного проекта ни к чему.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JCFYii 5. Дизайн-макет]]></title>
    <link href="http://AngryGantz.github.com/blog/2012/12/03/jcfyii-5/"/>
    <updated>2012-12-03T18:24:00+00:00</updated>
    <id>http://AngryGantz.github.com/blog/2012/12/03/jcfyii-5</id>
    <content type="html"><![CDATA[<p>Надо поднастроить <strong>main.css</strong>. Во первых дать отступ body на ширину меню, во вторых убрать border. Пусть страничка беленькая будет. Получаем вот такой код css для трех важных для этого элементов:</p>

<!-- more -->


<h3>main.css</h3>

<p>```css
body
{</p>

<pre><code>margin: 0;
padding: 0;
color: #555;
font: normal 10pt Arial,Helvetica,sans-serif;
background: #EFEFEF;
</code></pre>

<p>}</p>

<h1>page</h1>

<p>{</p>

<pre><code>margin-top: 40px;
margin-bottom: 5px;
background: white;
</code></pre>

<p>}</p>

<h1>header</h1>

<p>{</p>

<pre><code>margin: 0;
padding: 0;
</code></pre>

<p>}
```</p>

<p>Впрочем, Header нам сейчас не нужен. Разве что крошки туда загнать. Так и делаем. Вот от этого беленьекого листа с симпатишной менюшкой и будем плясать.</p>

<p>Крошки загоняем в Header и меняем виджет на bootstrap:</p>

<p>```php
&lt;?php
if (isset($this->breadcrumbs)):</p>

<pre><code>$this-&gt;widget('bootstrap.widgets.TbBreadcrumbs', array(
    'links' =&gt; $this-&gt;breadcrumbs,
));
</code></pre>

<p>endif
?>
```</p>

<p>Мои благие намерения не лезть в модули канули в лето. Но уж больно мне не понравился дизайн вьюшек Yii-User. Полностью переделал все вьюшки в "bootrap-style" Постараюсь хотя бы логику не трогать. В этом вроде как необходимости нет слава богу.</p>

<p>Итак, готовый скелет с работающей системой управления пользователями на основе ролей можно считать есть.
По хорошему конечно потестировать бы с недельку уже на этом этапе, но не в продакшен сайи идёт, пока так, баловство. Так что этот этап пропустим пока. Хотя потом надо будет заняться вопросами тестирования приложений на yii всерьёз. Как никак это чуть ли не половина работы на нормальном проекте.</p>

<h2>Меню</h2>

<p>Может я не понимаю своего счастья, но виджет CMenu меня не впечатлил. Будем делать меню на любимом Bootstrap
И кстати есть желание поделить лайоут main на несколько файлов для наглядности. В частности меню рисовать в отдельном файле, вызывамом из главного. Обзовём _menu.php и приступим.</p>

<p>Старое загоним в файл _cmenu, на всякий случай. И оба файлика положим в созданную папку <strong>layouts/add</strong>
из лайоута <strong>main</strong> меню будем подтягивать кодом <code>&lt;?php require_once '/add/_cmenu.php'; ?&gt;</code></p>

<p>Беру из документации пример менюшки, загоняю в <strong>_menu.php</strong> и смотрю что получилось -)</p>

<p>```php
&lt;?php $this->widget('bootstrap.widgets.TbNavbar', array(</p>

<pre><code>'type'=&gt;'inverse', // null or 'inverse'
'brand'=&gt;'Project name',
'brandUrl'=&gt;'#',
'collapse'=&gt;true, // requires bootstrap-responsive.css
'items'=&gt;array(
    array(
        'class'=&gt;'bootstrap.widgets.TbMenu',
        'items'=&gt;array(
            array('label'=&gt;'Home', 'url'=&gt;'#', 'active'=&gt;true),
            array('label'=&gt;'Link', 'url'=&gt;'#'),
            array('label'=&gt;'Dropdown', 'url'=&gt;'#', 'items'=&gt;array(
                array('label'=&gt;'Action', 'url'=&gt;'#'),
                array('label'=&gt;'Another action', 'url'=&gt;'#'),
                array('label'=&gt;'Something else here', 'url'=&gt;'#'),
                '---',
                array('label'=&gt;'NAV HEADER'),
                array('label'=&gt;'Separated link', 'url'=&gt;'#'),
                array('label'=&gt;'One more separated link', 'url'=&gt;'#'),
            )),
        ),
    ),
    '&lt;form class="navbar-search pull-left" action=""&gt;&lt;input type="text" class="search-query span2" placeholder="Search"&gt;&lt;/form&gt;',
    array(
        'class'=&gt;'bootstrap.widgets.TbMenu',
        'htmlOptions'=&gt;array('class'=&gt;'pull-right'),
        'items'=&gt;array(
            array('label'=&gt;'Link', 'url'=&gt;'#'),
            '---',
            array('label'=&gt;'Dropdown', 'url'=&gt;'#', 'items'=&gt;array(
                array('label'=&gt;'Action', 'url'=&gt;'#'),
                array('label'=&gt;'Another action', 'url'=&gt;'#'),
                array('label'=&gt;'Something else here', 'url'=&gt;'#'),
                '---',
                array('label'=&gt;'Separated link', 'url'=&gt;'#'),
            )),
        ),
    ),
),
</code></pre>

<p>)); ?>
```</p>

<p>Ошибок в консоли не видно, всё работает. Осталось донастроить и меню готово :-). Симпатишное, функциональное, красявое, за что и люблю bootstrap. Сайт будем делать светлым и менюшку тоже. Так что первым делом убираю инверсию.</p>

<p>Делее правим строчку <code>'brandUrl'=&gt;'index'</code> - Это будет вместо кнопочки <strong>Home</strong>, которую выкидываем. Далее меняем label=>link на Label=>Каталог, оставляя пока Урл пустым, это на будущее. Далее будут Контакты, куда же без них.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JCFYii 4 Управление пользователями и правами.]]></title>
    <link href="http://AngryGantz.github.com/blog/2012/12/03/jcfyii-4/"/>
    <updated>2012-12-03T11:13:00+00:00</updated>
    <id>http://AngryGantz.github.com/blog/2012/12/03/jcfyii-4</id>
    <content type="html"><![CDATA[<p>Что нужно практически в любом web-приложении? Что бы мы не делали, практически всегда необходима система управления пользователями и их правами. Только совсем простейшие проекты обходятся без этого. Поэтому до перехода ко всему остальному надо прикрутить что-то такое к проекту.</p>

<p>В Yii реализована схема управления правами RBAC, есть готовые менеджеры авторизации пользователей (для БД и файла). Чудненько. Но мы ещё упростим себе жизнь и не будем отписывать реализацию, а воспользуемся чем нибудь готовым. Как сказано в одном хорошем кино «всё уже покрадено до нас». Написано как правило тоже. Так что вперед, на офф сайт за нужными плюшками.</p>

<!-- more -->


<p>В разделе дополнений на офф сайте полно всякого разного по управлению пользователями и правами. Смотреть их все ни желания ни времени. Положимся на мнение общественности, рекомендующей Yii-User и Rights.</p>

<h2>Yii-User</h2>

<p><a href="http://www.yiiframework.com/extension/yii-user/">Страничка на оффсайте Yii</a></p>

<p><a href="http://yii-user.2mx.org/">Домашняя страничка</a></p>

<p>По описанию делает всё, что надо и не делает лишнего. Возможно не зря хвалили.
Качаю, создаю папку <code>/protected/modules</code> , Папку <code>User</code> из архива кидаю туда.</p>

<p>Далее всё включаем по мануалу в главном конфиге:</p>

<p>В секцию <strong>import</strong> добавлено:</p>

<pre><code>'application.models.*',
'application.components.*',
'application.modules.user.models.*',
'application.modules.user.components.*',
</code></pre>

<ul>
<li>В секцию <strong>modules</strong> после gii добавлено <code>user,</code></li>
<li>В секции <strong>components</strong> уже прописан компонент <strong>user</strong>. Это демо-компонент, сгенерированный приложением.  Меняю на то, что в мануале по модулю:</li>
</ul>


<p>```php
&lt;?php
'user'=>array(</p>

<pre><code>// enable cookie-based authentication
'allowAutoLogin'=&gt;true,
'loginUrl' =&gt; array('/user/login'),
</code></pre>

<p>),
?>
```</p>

<p>Заодно надо почистить хвостики от старого. Удаляем компонент <strong>UserIdentity.php</strong>, из контроллера <strong>SiteController.php</strong> удаляем действия <strong>actionLogin()</strong> и <strong>actionLogout()</strong>, ибо использоваться будет модуль.  Так же удаляется полностью модель <strong>LoginForm.php</strong> и вьюшка <strong>site/login.php</strong>. Вроде всё. Идём дальше.</p>

<ul>
<li>Создание таблиц БД. Смотрим <strong>modules/user/data/schema.mysql.sql</strong> Там создание трёх таблиц и занесение пары аккаунтов - admin и demo. Вот только префиксы... Ну не люблю я эти «tbl_». Буду делать префиксы помодульно. Будет более менее осмысленно, когда (и если) проект разрастется. Меняю «tbl_» на «user_» и выполняю скрипт в MySQL. Но ведь очевидно, где-то была привязка к этим «tbl_». Начнем с файла модуля <strong>modules/user/UserModule.php</strong>. Нахожу вот такие строки:</li>
</ul>


<p>```php
&lt;?php</p>

<pre><code>public $tableUsers = '{ {users} }';
public $tableProfiles = '{ {profiles} }';
public $tableProfileFields = '{ {profiles_fields} }';
</code></pre>

<p>?>
```</p>

<p>Это даже не привязка к «tbl_». Даже не знаю, как понимать. Может это связано с настройкой модуля из консоли через миграции? Что-такое читал. Ну да бог с ним. В любом случае это паблик свойства и их можно переопределить прямо в глобальном конфиге приложения, в секции модуля <strong>user</strong>. Топаем в <strong>config/main.php</strong> и меняем сиротливую строку <code>user,</code> на секцию</p>

<p>```php
&lt;?php
'user'=>array(</p>

<pre><code>'tableUsers'=&gt;'user_users',
'tableProfiles'=&gt;'user_profiles',
'tableProfileFields'=&gt;'user_profiles_fields',
</code></pre>

<p>),</p>

<p>?>
```</p>

<ul>
<li>Ну и последнее. Прописать эти все радости в меню. Меню нарисовано в <strong>view/layouts/main.php</strong> Выбрасываю оттуда неактуальные <strong>Login</strong> и <strong>Logout</strong> и особо не всматриваясь копипастом из мануала загоняю туда блок</li>
</ul>


<p>```php
&lt;?php
array('url'=>Yii::app()->getModule('user')->loginUrl,</p>

<pre><code>'label'=&gt;Yii::app()-&gt;getModule('user')-&gt;t("Login"), 'visible'=&gt;Yii::app()-&gt;user-&gt;isGuest),
</code></pre>

<p>array('url'=>Yii::app()->getModule('user')->registrationUrl,</p>

<pre><code>'label'=&gt;Yii::app()-&gt;getModule('user')-&gt;t("Register"), 'visible'=&gt;Yii::app()-&gt;user-&gt;isGuest),
</code></pre>

<p>array('url'=>Yii::app()->getModule('user')->profileUrl,</p>

<pre><code>'label'=&gt;Yii::app()-&gt;getModule('user')-&gt;t("Profile"), 'visible'=&gt;!Yii::app()-&gt;user-&gt;isGuest),
</code></pre>

<p>array('url'=>Yii::app()->getModule('user')->logoutUrl,</p>

<pre><code>'label'=&gt;Yii::app()-&gt;getModule('user')-&gt;t("Logout").' ('.Yii::app()-&gt;user-&gt;name.')',      
</code></pre>

<p>'visible'=>!Yii::app()->user->isGuest),
?>
```</p>

<p>Проверяем модуль. Ссылки меню, регистрация, логин-логаут, всё работает. Приятно. Да, всё конечно англицкое, придется с этим всем повозиться потом. Причём чует моё сердце писсимиста, что если делать интернационализацию "по фен-шую" то повозиться придется долго. В идеале даже во вьюшках текста прямого быть не должно, только вызовы мессаджей. Но боюсь, что на этот мазохизм меня всё таки не хватит. Хотя... Пишу же эти простыни, кто знает... :-)</p>

<p>Но главное, модуль работает, логика своё отрабатывает, а внешний вид и языки потом. Сначала строим логику.</p>

<h2>Модуль RIGHTS</h2>

<p><a href="http://www.yiiframework.com/extension/rights">Страничка на оффсайте</a>
Это модуль управления правами пользователей. Зачем он мне нужен? Ну как минимум у меня предполагается Гость, Админ, Клиент (дилер) и Менеджер. В дальнейшем возможно ещё розничные клиенты, какой нибудь старший менеджер и так далее и тому подобное. В Yii реализована система управления правами RBAC. <a href="http://yiiframework.ru/doc/guide/ru/topics.auth">Подробности тут</a>. Rights вроде как предоставляет полный инструментарий для управления и использования этой системы. То, что бегло прочитал, понравилось. Вопрос на сколько это удобно и как этот модуль "сработается" с предыдущим установленным - Yii-User. Начнем.</p>

<h3>Установка.</h3>

<p>Скачиваю мануальчик и сам модуль. Папку <strong>rights</strong> из архива кидаем в модули и читаем мануальчик.
Так. Первое. В требованиях наличие БД (ну это понятно) и наличие модели <strong>user</strong> с атрибутами <strong>id</strong> и <strong>name</strong>. В нашей табличке <strong>user_users</strong> поле <strong>id</strong> есть, а вот вместо поля <strong>name</strong> имеем <strong>username</strong>. Но пролистав документацию в разделе конфигурации вижу <code>'userNameColumn'=&gt;'username',</code> причём это по дефолту, даже менять ничего не надо. Возвращаюсь к инсталляции модуля. Первое стандартно - импорт.</p>

<p>```php
&lt;?php
'import'=>array(</p>

<pre><code>'application.modules.rights.*', 
'application.modules.rights.components.*', // Correct paths if necessary. 
</code></pre>

<p>),
?>
```</p>

<p>А вот дальше интересно:</p>

<p>```php
&lt;?php
'components'=>array(</p>

<pre><code>'user'=&gt;array( 
    'class'=&gt;'RWebUser', // Allows super users access implicitly. 
),
</code></pre>

<p>'authManager'=>array(</p>

<pre><code>    'class'=&gt;'RDbAuthManager', // Provides support authorization item sorting. 
), 
</code></pre>

<p>),
?>
```</p>

<p>С менеджером аутентификации всё ясно - подключаем менеджера, работающего через БД. А вот <strong>user</strong>...
Гложат меня смутные сомнения что не всё гладко будет... Надеюсь зря.
Делаем и продолжаем. Просто добавляем в секцию <strong>user</strong> компонентов (<strong>и не путать с аналогичной секцией в модулях!</strong>) строку с определением класса. Пока до выяснения получится вот что:</p>

<p>```php
&lt;?php
'user'=>array(</p>

<pre><code>    'class'=&gt;'RWebUser',
    // enable cookie-based authentication
    'allowAutoLogin'=&gt;true,
    'loginUrl' =&gt; array('/user/login'),
</code></pre>

<p>),
?>
```</p>

<p>В секции модулей рисуем как в мануале, только <strong>installer</strong> пока ставлю <strong>false</strong>, сначала надо разобраться чего это за зверь, мне ещё с табличками и префиксами разобраться надо, а то нарисует чего попало в базу...</p>

<p>```php
&lt;?php
'rights'=>array(</p>

<pre><code>'install'=&gt;false, // Enables the installer. ), 
</code></pre>

<p> ),          <br/>
?>
```</p>

<p>Так, смотрим дальше. В конфиге по дефолту <code>'superuserName'=&gt;'Admin',</code>, а у нас юзер - <strong>admin</strong>.
На всякий случай меняем. Секция в модулях теперь такая:</p>

<p>```php
&lt;?php
'rights'=>array(</p>

<pre><code>'install'=&gt;false, // Enables the installer. 
'superuserName'=&gt;'admin',
</code></pre>

<p> ),          <br/>
?>
```</p>

<p>Остальные дефолты вроде устраивают. В файле <strong>modules/rights/data/schema.sql</strong> меняем названия таблиц соответственно на <strong>rights_auth_item, rights_auth_item_child, rights_auth_assignment, rights_rights</strong> не только добавив префикс модуля, но сменив тип нотации со стиля "CaMel" для единообразия в БД. Теперь смотрим где в модуле они привязаны. Собственно упоминания есть только в файле <strong>components/RInstaller.php</strong>. Но менять ничего не надо, поскольку судя по блоку, где они упоминаются, инсталлер сам корректирует названия в зависимости от схемы sql. Но. Тут есть одно большое Но. Провозился почти час, пока дошло. Дело в том, что к именам таблиц привязан и родной <strong>authManager CDbAuthManager</strong> И, соответственно, кроме того, что мы меняем имена таблиц в SQL файле, их надо ещё указать в компоненте authManager. И последний штрих - надо назначить роль по умолчанию для незалогиненых пользователей <code>'defaultRoles'=&gt;array('Guest'),</code> То есть секция этого компонента должна выглядеть вот так (таблица <strong>rights</strong> - это уже детище наследника из установленного модуля):</p>

<p>```php
&lt;?php
'authManager'=>array(</p>

<pre><code>'class'=&gt;'RDbAuthManager', 
'assignmentTable'=&gt;'rights_auth_assignment',
'itemChildTable'=&gt;'rights_auth_item_child',
'itemTable'=&gt;'rights_auth_item',
'rightsTable'=&gt;'rights_rights',
</code></pre>

<p> ),
?>
```</p>

<p>А теперь собственно никто не мешает воспользоваться инсталлером модуля. В секции модулей у модуля <strong>rights</strong> возвращаем в <strong>true</strong> свойство <strong>install</strong>:</p>

<p>```php
&lt;?php
'rights'=>array(</p>

<pre><code>'install'=&gt;true, // Enables the installer. 
'superuserName'=&gt;'admin',
</code></pre>

<p> ),
?>
```</p>

<p>Теперь даем в браузере команду <strong>../rights/</strong> и наслаждаемся поздравлениями об успешной установке. Проверив таблицы в БД убеждаемся, что они созданы с нужными именами. Уффф... помучился.</p>

<p>Да, где-то по дороге вычитал ещё одну тонкость. Прежде чем устанавливать <strong>модуль Rights</strong> необходимо полностью установить <strong>Yii-User</strong>, авторизоваться под админом и только после этого ставить <strong>rights</strong>. Иначе возникнут дополнительные проблемы. У меня это "на автомате" получилось, а народ мучается...</p>

<p>Теперь в конфиге надо отключить инсталлер выставив <strong>false</strong> уже лениво писать где :-)</p>

<p>Но с окончательной установкой модуля ещё не всё. Во первых есть генератор разрешений для всех контроллеров (это по идеологии RBAC <strong>задачи, tasks</strong> ) и всех действий внутри контроллеров отдельно ( <strong>операции</strong> по RBAC) разрешение на которые можно присвоить любой роли или любому пользователю. Ну это постепенно буду соображать кому, что и зачем. А вот как поизящнее делать видимым элемент на вьюшке в зависимости от роли, надо будет решать уже скоро.</p>

<p>Для включения нового функционала - фильтров построенных на базе rights,  осталось только унаследовать стандартный контроллер приложения не от CController, а от RController и в контроллерах можно использовать функции фильтров rights примерно так:</p>

<p>```php
&lt;?php
public function filters() {</p>

<pre><code>return array( 'rights', ); 
</code></pre>

<p>}
ublic function allowedActions() {</p>

<pre><code>return 'index, suggestedTags'; 
</code></pre>

<p>}
?>
```</p>

<p><strong>allowedActions</strong> - перечисление действий, которые будут доступны всем и всегда вне зависимости от установленных прав.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JCFYii 3. Bootstrap]]></title>
    <link href="http://AngryGantz.github.com/blog/2012/12/03/jcfyii-3/"/>
    <updated>2012-12-03T09:00:00+00:00</updated>
    <id>http://AngryGantz.github.com/blog/2012/12/03/jcfyii-3</id>
    <content type="html"><![CDATA[<p>Ну а куда сегодня без него? :-) Уж слишком полезная и удобная вещь. Однозначно буду использовать.
Вот только вопрос как и в каком виде? На офф сайте несколько вроде как приятных расширений, которые упрощают работу с бутстрапом в рамках Yii - и оболочки для виджетов и шаблоны генератора кода для Gii и вообще много полезного...</p>

<!-- more -->


<p>Но есть одно большое "Но". Если модули управления пользователями практически законченный продукт, где вобщем то и добавлять нечего, разве что баги править, то бутстрап - штука быстро меняющаяся и развивающаяся. С другой стороны разработчики расширений сегодня тут, а завтра кто знает... Уже сейчас там видно отставание приличное по поддерживаемым версиям, а что будет завтра? Как то ненадежно привязывать себя к такому продукту. Ну разве что подхватывать флаг разработки, когда это самое расширение безнадежно устареет.
А для этого и куча времени нужна и неслабое знание Yii, которого по понятным причинам нет, да и будет ли ещё бабушка надвое сказала...</p>

<p>С другой стороны дружить bootstrap с незнакомым фрэймворком... Столько подводных камней словить можно, что мама не горюй. Опять же скорость разработки несмотря на то, что проект неспешный, штука нужная и важная, особенно если Yii займёт свою нишу как инструмент разработки уже для реальных проектов.
Прямо Витязь на распутье - На лево пойдёшь, по голове получишь, направо -тоже. Прямо - та же судьба. А стоять останешся, прямо у камня и настучат.</p>

<p>Ладно. Может и не прекратят поддержку расширений, может и флаг подхвачу может... Вобщем пробуем расширение.
<a href="http://www.cniska.net/yii-bootstrap/">Вот это</a>. А там будем посмотреть.</p>

<p>Сгенерированное приложение использует CSS Фрэймворк Blueprint (тоже кстати штука приятная, но бутстрап на мой взгляд гораздо интереснее. Значит надо избавиться от блюпринта и "перевестись" на бутстрап.
Иначе будет такая мешанина из CSS, что не дай то господи.</p>

<p>В папке CSS 3 блюпринтовских файла - <strong>screen, print, ie</strong>. Поступим радикально, просто их удалим нафиг.
<strong>form</strong> и <strong>main</strong> пусть пока живут, дальше видно будет что с ними и как.</p>

<p>Внешних проявлений после удаления немного - только на всё окно сайт раскрылся.</p>

<p>Приступаю к установке расширения. Всё по мануалу, ничего сложного. В секции <strong>preload</strong> уже болтается <strong>log</strong>. Просто добавляем туда bootstrap:</p>

<p><code>php
&lt;?php
'preload'=&gt;array('log','bootstrap'),
?&gt;
</code></p>

<p>Дополняем секцию с <strong>gii</strong> и получаем</p>

<p>```php
&lt;?php</p>

<pre><code>    'gii'=&gt;array(
        'class'=&gt;'system.gii.GiiModule',
        'password'=&gt;'12345',
        // If removed, Gii defaults to localhost only. Edit carefully to taste.
        'ipFilters'=&gt;array('127.0.0.10','::1'),
                    'generatorPaths'=&gt;array(
                            'bootstrap.gii',                    
                    )    
    ),
</code></pre>

<p>?>
```</p>

<p>Осталось только прописать в компонентах:</p>

<p>```php
&lt;?php
'bootstrap'=>array(</p>

<pre><code>    'class'=&gt;'ext.bootstrap.components.Bootstrap', // assuming you extracted bootstrap under extensions
</code></pre>

<p> ),
?>
```</p>

<p>А конфиг всё растёт и растёт -) Но это пока не всё. Если уж связались с bootstrap, то лучше и LESS под рукой иметь. Ставим до кучи к botstrap ещё <a href="http://www.yiiframework.com/extension/less">вот это расширение</a>
Ну тут ставится за 1 минуту, писать нечего уже. Принцип конфига понятен, процесс инсталляции на страничке с расширением описан...</p>

<p>Вот теперь всё с установкой.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JCFYii 2. Выбор структуры и первичная настройка]]></title>
    <link href="http://AngryGantz.github.com/blog/2012/12/03/jcfyii-2/"/>
    <updated>2012-12-03T02:20:00+00:00</updated>
    <id>http://AngryGantz.github.com/blog/2012/12/03/jcfyii-2</id>
    <content type="html"><![CDATA[<p>Не тот случай, что-бы изобретать велосипеды. За базу взято стандартное приложение yii, генерируемое из консоли
командой <code>% YiiRoot/framework/yiic webapp WebRoot/testdrive</code>.  Думаю это снимет часть проблем новичка. Хотя конечно правильнее на мой взгляд делить фронт и бэк. А тут по структуре всё вроде как в куче получается.
Модули фронт и бэк можно использовать как вариант, но предполагается использование кучи сторонних разработок и модули юзеров, прав и т.д. - общие и при модулях фронт-бэк будет больше путаницы, чем пользы</p>

<!--more-->


<p>Попробую разделить на уровне контроллеров и вьюшек, тупо создав подпапки front и Back, в которых будут (предположительно) этакие "надконтроллеры" общего назначения, а сторонние модули надо постараться не трогать вообще, за исключением может быть вьюшек. Попытка не пытка -). Каталог собственного производства так же загоню в отдельный модуль. Причём очень хочется разделить собственно каталог от системы заказов и корзины. Пока слабо понимаю, как это сделать. Вьюшки по любому пересекутся требуя и того и другого и третьего.</p>

<p>Вобщем желаний много, а как это всё сделать пока не очень понятно. Ну главное начать копать от КПП и к обеду что-нибудь прояснится.</p>

<h2>Первичная настройка</h2>

<h3>Куда деть фрэймворк?</h3>

<p>Сам фрэймворк у меня оказался за бортом www директории. Как-то мне это не нравится. Кому как, а мне не по фен-шую. Перенес фрэймворк в <code>www/protected/lib/yii</code>
В файле <code>www/index.php</code> поменял путь к нему:
<code>$yii=dirname(__FILE__).'/protected/lib/yii/yii.php';</code>
По мне так красивее, чем миллион ../../../  и т.д. Опять же, если это всё перерастет из ознакомления для души в работу, лучше сразу готовить нормальные сани, а на некоторых хостингах с папкой "за рутом" могут всякие проблемы возникнуть.</p>

<h3>Подключение к БД.</h3>

<p>Создал БД <code>jcat</code>.
В файле <code>protected/config/main.php</code> раскомментил блок подключения к MySQL и настроил на базу, а подключение к лайт вырубил:</p>

<p>```php
&lt;?php</p>

<pre><code>// ......  
/*
'db'=&gt;array(
    'connectionString' =&gt; 'sqlite:'.dirname(__FILE__).'/../data/testdrive.db',
),
*/
// uncomment the following to use a MySQL database
'db'=&gt;array(
    'connectionString' =&gt; 'mysql:host=localhost;dbname=jcat',
'emulatePrepare' =&gt; true,
'username' =&gt; 'root',
'password' =&gt; '',
'charset' =&gt; 'utf8',
),
</code></pre>

<p>?>
```</p>

<h3>Включение GII</h3>

<p>Фишка yii - автоматическое создание кода CRUD - моделей, контроллеров, вьюшек на базе таблицы БД - штука приятная и полезная. В принципе в бэке можно и стандартными вьюшками обойтись, а во фронте как база.
Вобщем оно мне надо. Включил раскомментировав в <em>config/main.php</em> соответствующую секцию и прописал в айпи фильтр адрес, на котором сайт на локале крутится и пароль.</p>

<p>```php
&lt;?php
   'gii'=>array(</p>

<pre><code>    'class'=&gt;'system.gii.GiiModule',
    'password'=&gt;'12345',
    // If removed, Gii defaults to localhost only. Edit carefully to taste.
    'ipFilters'=&gt;array('127.0.0.10','::1'),
),
</code></pre>

<p>?>
```</p>

<h3>Включение ЧПУ</h3>

<p>Ну а куда без них? Пока тоже всё просто - надо только снять комментарии с секции URLManager в том же главном файле конфигурации:</p>

<p>```php
&lt;?php
   // uncomment the following to enable URLs in path-format</p>

<pre><code>'urlManager'=&gt;array(
    'urlFormat'=&gt;'path',
    'rules'=&gt;array(
        '&lt;controller:\w+&gt;/&lt;id:\d+&gt;'=&gt;'&lt;controller&gt;/view',
        '&lt;controller:\w+&gt;/&lt;action:\w+&gt;/&lt;id:\d+&gt;'=&gt;'&lt;controller&gt;/&lt;action&gt;',
        '&lt;controller:\w+&gt;/&lt;action:\w+&gt;'=&gt;'&lt;controller&gt;/&lt;action&gt;',
),
),
</code></pre>

<p>?>
```</p>

<p>Ага. Просто. Как говорится, "ну вот, началось". <em>index.php</em> из адреса никуда не делся. Некрасяво. Надо бы разобраться. Придётся шаманить с <em>urlManager</em> и <em>.htaccess</em>. Впрочем можно и не шаманить самому, всё уже придумано до нас. минута на гугле и есть решение. Писать дольше чем делать, но обещал себе родимому.
Итак, всё просто. в корне создаём ".htaccess". Туда рисуем:</p>

<p>```php
&lt;?php</p>

<pre><code>RewriteEngine on
# if a directory or a file exists, use it directly
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
# otherwise forward it to index.php
RewriteRule . index.php
</code></pre>

<p>?>
```</p>

<p>а в конфиге добавляем параметр для <strong>urlManager</strong>: <code>'showScriptName' =&gt; false,</code>, то есть секция теперь выглядит так:</p>

<p>```php
&lt;?php</p>

<pre><code>'urlManager'=&gt;array(
    'urlFormat'=&gt;'path',
    'showScriptName' =&gt; false,
    'rules'=&gt;array(
     '&lt;controller:\w+&gt;/&lt;id:\d+&gt;'=&gt;'&lt;controller&gt;/view',
     '&lt;controller:\w+&gt;/&lt;action:\w+&gt;/&lt;id:\d+&gt;'=&gt;'&lt;controller&gt;/&lt;action&gt;',
     '&lt;controller:\w+&gt;/&lt;action:\w+&gt;'=&gt;'&lt;controller&gt;/&lt;action&gt;',
),
),
</code></pre>

<p>?>
```</p>

<p>Правда если переходить в меню сгенерированного приложения по ссылке <strong>"About"</strong>, в адреной строке появляется <code>http://locyii/site/page?view=about</code>, но это уже проблема менюшки, так как <code>http://locyii/site/page/view/about</code> вполне себе работает. А с меню потом. Может и меню то другое будет.</p>

<p>Ну вот, начальную настройку считаю завершенной. На всё про всё ушло минут 20, это вместе с просматриванием доков на yiiframework.ru. Писал эту простыню гораздо дольше :-)</p>
]]></content>
  </entry>
  
</feed>
